package Item24;


import java.util.*;

// Item 24 : 멤버 클래스는 되도록 static으로 만들어라
public class Main {
    public static void main(String[] args){

        // 중첩클래스
        // - 다른 클래스 안에 정의된 클래스를 의미
        // - 자신을 감싼 클래스 안에서만 쓰여야 하며 그렇지 않다면 톱클래스로써 사용되어야 한다.
        // - 종류 : 정적 멤버 클래스, (비정적) 멤버 클래스, 익명 클래스, 지역 클래스
        // - 정적 멤버 클래스를 제외한 나머지는 내부클래스(inner class)에 해당한다.


        // 주제 : 각각의 중첩클래스를 언제 그리고 왜 사용하는지 알아보자!


        // (+) 바깥 클래스 : 이 클래스를 선언한 클래스
        // 1. 정적 멤버 클래스
        // - 다른 클래스 안에 선언되고 선언한 클래스의 private 멤버를 접근 가능하는 특징을 가진다.
        // - 반대로, 해당 클래스를 private 설정시 선언한 클래스에서만 접근 가능하다.
        // - 바깥 클래스와 함께 쓰일때만 유용한 public 도우미 클래스로 사용된다.
        // - 예시로 아래의 경우는 enum 클래스를 public static으로 설정하여 클라이언트는 참조 가능
        System.out.println(Calculator.Operation.MINUS);

        // (+) private 정적 멤버 클래스
        // - 바깥 클래스가 표현하는 객체의 한부분으로 쓰인다.
        // - 예시로 Map은 key-value를 가지고 있는 엔트리 클래스가 존재한다.
        // - 아래에서 확인할 수 있듯이 해당 Map은 엔트리 클래스의 메서드를 사용하지 않으므로 메모리 낭비를 막기 위해 정적 멤버로 선언한다.


        // 2. 비정적 멤버 클래스
        // - 정적과의 구문상 차이는 static 뿐이지만 많이 다름
        // - 바깥 클래스의 인스턴스와 암묵적 연결이 된다.
        // -> 비정적 멤버 클래스의 인스턴스 메서드에서 정규화된 this를 이용해 바깥 클래스의 메서드를 호출하거나
        // 인스턴스의 참조를 가져올 수 있다.
        // -> 정규화된 this = 클래스명.this
        // - 비정적 멤버 클래스와 바깥 클래스의 관계는 멤버클래스가 인스턴스화될 때, 확립되며 변경 불가능
        // -> 바깥 클래스의 인스턴스 메서드에서 비정적 멤버 클래스의 생성자를 호출할 때 관계 형성
        Out1 test = new Out1(1);
        test.printInValue();

        // 정적 vs 비정적
        // - 중첩 클래스의 인스턴스가 바깥 인스턴스와 독립적으로 존재할 수 있다면 정적 멤버 클래스로 만들어야 한다.
        // - 비정적 멤버 클래스는 바깥 인스턴스 없이는 생성될 수 없기 때문이다.
        // - 멤버 클래스에서 바깥 인스턴스에 접근할 일이 없다면 무조건 static을 붙여서 정적 멤버 클래스로 만들자.
        // - static 지정을 안한다면 바깥 클래스의 인스턴스로의 참조가 생기고 가비지 컬렉터가 수거시 문제가 될 수 있다.

        // 비정적 멤버 클래스의 사용
        // - Map 인터페이스의 구현체들은 보통 keySet 메서드와 같이 자신의 컬렉션 뷰를 구현할 때
        // - Set, List 등도 자신의 반복자를 구현할 때 비정적 멤버 클래스를 주로 사용
        // -> HashMap 에 들어가보면 keySet 라는 비정적 멤버 클래스가 정의되어 있다.
        // -> 이는 HashMap 없이 독립적으로 사용할 수 없기에 비정적 멤버 클래스로 생성한 것이다.


        // 3. 익명 클래스
        // - 바깥 클래스의 멤버는 아니다.
        // - 쓰이는 시점에 선언과 동시에 인스턴스가 만들어진다.
        // - 오직, 비정적인 문맥(static이 선언 안되어있는 메서드)에서 사용될때만 바깥 클래스의 인스턴스를 참조 가능하다.
        // - 정적 문맥(static 선언 메서드)에서는 상수 변수 이외에 정적 멤버는 가질 수 없다.
        // - 즉, 정적 문맥에서는 상수 표현을 위해 초기화된 final 기본 타입과 문자열 필드만 가질 수 있다.
        // - 정적 문맥에서는 정적 추상 클래스를 통해 만든 익명 클래스만 사용 가능하다.
        // - 제약 : 인스턴스를 선언한 지점에서만 생성가능하고, instanceOf 메서드 사용 불가능
        // - 람다식을 주로 대신 사용
        Outer test2 = new Outer();
        test2.doSomething1();
        test2.doSomething2();


        // 4. 지역 클래스
        // - 지역 변수처럼 사용
        // - 멤버 클래스처럼 이름이 있어 반복해서 사용 가능
        // - 익명 클래스처럼 비정적 문맥에서만 사용될 때 바깥 인스턴스를 참조할 수 있다.
        // - 가독성을 위해 짧게 작성되어야 한다.


        // 정리
        // -> 중첩클래스에는 네가지가 있고 각 쓰임이 다르다.
        // -> 바깥 클래스의 메서드 밖에서도 사용해야 하고 메서드 안에 정의하기 너무 길다면 멤버로 설정
        // -> 멤버 클래스의 인스턴스 각각이 바깥 인스턴스를 참조한다면 비정적으로, 그렇지 않다면 정적으로 만들자
        // -> 중첩 클래스가 한 메서드 안에서만 쓰이면서 그 인스턴스를 생성하는 지점이 단 한곳이고,
        // 해당 타입으로 쓰기에 적합한 클래스나 인터페이스가 이미 있다면 익명 클래스로 만들고
        // 그렇지 않다면 지역 클래스로 만들자.



    }
}
