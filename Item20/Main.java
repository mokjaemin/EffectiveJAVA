package Item20;


import java.util.*;


// Item 20 : 추상 클래스보다는 인터페이스를 우선시 하라.
public class Main {
    public static void main(String[] args){


        // 이 파트는 블로그 보는게 나음 잘 정리함



        // 자바가 제공하는 다중 구현 매커니즘 : 추상 클래스, 인터페이스
        // - 인터페이스가 디폴트 메서드를 기질 수 있기 때문에 두 매커니즘 다 인스턴스 메서드를 구현 형태로 제공가능
        // - 디폴트 메서드 : 인터페이스에 있는 메서드지만 해당 인터페이스를 구현한 클래스에서 굳이 재정의 안해도 되는 메서드
        TestInterface test = new TestClass();
        test.AbstractMethod();
        test.defaultMethod();

        // 추상 클래스의 단점
        // - 추상 클래스를 상속하는 클래스는 반드시 추상 클래스의 하위 클래스가 되어야 한다.
        // - 자바는 단일 상속만 지원하기 때문이다.
        // - 반면, 인터페이스는 메서드를 잘 정의하고 일반 규약을 지킨다면 다른 클래스를 상속받아도 된다.



        // 인터페이스의 장점

        // - 1. 기존 클래스에도 손쉽게 새로운 인터페이스를 구현해 넣을 수 있다.
        // -> 인터페이스가 요구하는 메서드를 정의하고 implements 구문에 추가하면 끝
        // -> 반면, 기존 클래스 위에 추상 클래스를 추가하는 것은 굉장히 어려움
        // -> 예를들어, 두 클래스의 추상 클래스를 만들 시 해당 추상 클래스는 두 클래스의 공통 조상이여야 하는데 쉽지 않음

        // - 2. 인터페이스는 믹스인 정의에 안성맞춤이다.
        // -> 믹스인 : 클래스가 구현할 수 있는 타입으로, 믹스인을 구현한 클래스에 원래의 '주된 타입' 외에도
        // 특정 선택적 행위를 제공한다고 선언하는 효과를 준다.
        // -> 예시 : Comparable 인터페이스를 구현하면 해당 클래스가 비교 가능하여 순서지정이 가능함을 알려준다.
        // -> 주된 기능에 선택적 기능을 추가하기에 '믹스인' 이라고 한다.
        // -> 클래스는 두개의 추상 클래스를 둘 수 없기에 추상 클래스는 믹스인으로써의 역할이 불가능하다.

        // - 3. 인터페이스로는 계층 구조가 없는 타입 프레임워크를 만들 수 있다.
        // -> 타입을 계층적으로 정의하면 수많은 개념을 구조적으로 잘 표현할 수 있지만,
        // 현실에는 계층을 엄격히 분리 하는 것이 불가능한 경우도 존재한다.
        // -> 예시 : Singer, Composer 인터페이스를 모두 구현하여 싱어송 라이터 클래스 생성 가능
        // -> 또한 두 인터페이스를 extends 한 SingerSongWriter 인터페이스를 새로 생성도 가능
        // "결론적으로 인터페이스는 좀 더 유연한 계층 구조 설정이 가능하다"

        // - 4. 인터페이스의 메서드 중 구현 방법이 명백한 것이 있다면,
        // 디폴트 메서드를 활용해 프로그래머의 일감을 덜어줄 수 있다.
        // -> 디폴트 메서드를 사용할 때에는 @implSpec을 사용해 설명을 꼭 적자


        // 인터페이스와 추상 클래스의 장점을 모두 취하는 방법 : 템플릿 메서드 패턴
        // -> 인터페이스와 추상 골격 클래스을 동시에 제공
        // -> 만약 인터페이스의 이름이 Interface라면 추상 골격 클래스의 이름으로 AbstractInterface로 짓는다
        // -> 예시 : AbstractCollection, AbstractList 등
        // -> 인터페이스로는 타입을 정의하고, 필요하다면 디폴트 메서드를 몇개 제공한다.
        // -> 골격 구현 클래스로는 나머지 메서드들까지 구현한다.
        // "추상 클래스처럼 구현을 도와주는 동시에, 추상 클래스로 타입을 정의할 때 따라오는 제약에서 자유롭다"

        // 1. 인터페이스를 잘 살펴 다른 메서드들의 구현에 사용되는 기반 메서드를 선정 -> 골격 구현에서 추상메서드가 됨
        // 2. 기반 메서드를 통해 직접 구현 가능한 메서드들을 디폴트 메서드로 제공
        // (equals, hashCode와 같은 Object 의 메서드들은 디폴트로 제공하면 안된다.)
        // (만약, 인터페이스이 모든 메서드가 디폴트 메서드 또는 기반 메서드라면 굳이 추상 골격 클래스를 만들 필요가 없다.)
        // 3. 만약 구현할 메서드가 남았다면 추상 골격 클래스에 작성한다.

        // 예시 : Map.Entry 인터페이스
        // 1. 기반 메서드 : getKey, getValue -> 확실히 필요하므로 기반 메서드로 설정
        // 2. 추가 메서드 : setValue -> 선택적으로 포함할 수 있다, 골격 구현 클래스에 작성
        // 3. Object의 메서드 : toString 등 -> 골격 구현 클래스에 작성


        AbstractList<Integer> test1 = new AbstractList<Integer>() {
            @Override
            public int size() {
                return 0;
            }

            @Override
            public Integer get(int index) {
                return null;
            }
        };





    }
}
